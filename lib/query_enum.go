// Code generated by go-enum
// DO NOT EDIT!

package lib

import (
	"fmt"
)

const (
	// FormatJson is a Format of type Json
	FormatJson Format = iota
	// FormatCsv is a Format of type Csv
	FormatCsv
	// FormatTable is a Format of type Table
	FormatTable
	// FormatXlsx is a Format of type Xlsx
	FormatXlsx
)

const _FormatName = "jsoncsvtablexlsx"

var _FormatMap = map[Format]string{
	0: _FormatName[0:4],
	1: _FormatName[4:7],
	2: _FormatName[7:12],
	3: _FormatName[12:16],
}

// String implements the Stringer interface.
func (x Format) String() string {
	if str, ok := _FormatMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Format(%d)", x)
}

var _FormatValue = map[string]Format{
	_FormatName[0:4]:   0,
	_FormatName[4:7]:   1,
	_FormatName[7:12]:  2,
	_FormatName[12:16]: 3,
}

// ParseFormat attempts to convert a string to a Format
func ParseFormat(name string) (Format, error) {
	if x, ok := _FormatValue[name]; ok {
		return x, nil
	}
	return Format(0), fmt.Errorf("%s is not a valid Format", name)
}
